%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.20.3 on {{2016,6,3},{0,59,36}}
-module(navstar_dns_navstar_dns_pb).
-dialyzer([{nowarn_function, [v_msg_navstar_dns_record/2]}]).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2]).
-export([merge_msgs/2]).
-export([verify_msg/1]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_Record.Type'/1, 'enum_value_by_symbol_Record.Type'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("navstar_dns_navstar_dns_pb.hrl").
-include_lib("gpb/include/gpb.hrl").

%% enumerated types
-type 'Record.Type'() :: 'A' | 'SRV'.
-export_type(['Record.Type'/0]).

%% message types
-type navstar_dns_arecord() :: #navstar_dns_arecord{}.
-type navstar_dns_srvrecord() :: #navstar_dns_srvrecord{}.
-type navstar_dns_record() :: #navstar_dns_record{}.
-type navstar_dns_zone() :: #navstar_dns_zone{}.
-export_type(['navstar_dns_arecord'/0, 'navstar_dns_srvrecord'/0, 'navstar_dns_record'/0, 'navstar_dns_zone'/0]).

encode_msg(Msg) -> encode_msg(Msg, []).


encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg);
      false -> ok
    end,
    case Msg of
      #navstar_dns_arecord{} ->
	  e_msg_navstar_dns_arecord(Msg);
      #navstar_dns_srvrecord{} ->
	  e_msg_navstar_dns_srvrecord(Msg);
      #navstar_dns_record{} -> e_msg_navstar_dns_record(Msg);
      #navstar_dns_zone{} -> e_msg_navstar_dns_zone(Msg)
    end.


'e_enum_Record.Type'('A', Bin) -> <<Bin/binary, 0>>;
'e_enum_Record.Type'('SRV', Bin) -> <<Bin/binary, 1>>.

e_msg_navstar_dns_arecord(Msg) ->
    e_msg_navstar_dns_arecord(Msg, <<>>).


e_msg_navstar_dns_arecord(#navstar_dns_arecord{ip = F1},
			  Bin) ->
    e_varint(F1, <<Bin/binary, 8>>).

e_msg_navstar_dns_srvrecord(Msg) ->
    e_msg_navstar_dns_srvrecord(Msg, <<>>).


e_msg_navstar_dns_srvrecord(#navstar_dns_srvrecord{priority
						       = F1,
						   weight = F2, target = F3,
						   port = F4},
			    Bin) ->
    B1 = e_type_int32(F1, <<Bin/binary, 8>>),
    B2 = e_type_int32(F2, <<B1/binary, 16>>),
    B3 = e_type_string(F3, <<B2/binary, 26>>),
    e_type_int32(F4, <<B3/binary, 32>>).

e_msg_navstar_dns_record(Msg) ->
    e_msg_navstar_dns_record(Msg, <<>>).


e_msg_navstar_dns_record(#navstar_dns_record{name = F1,
					     type = F2, srv_record = F3,
					     a_record = F4},
			 Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = 'e_enum_Record.Type'(F2, <<B1/binary, 16>>),
    B3 = if F3 == undefined -> B2;
	    true ->
		e_mfield_navstar_dns_record_srv_record(F3,
						       <<B2/binary, 26>>)
	 end,
    if F4 == undefined -> B3;
       true ->
	   e_mfield_navstar_dns_record_a_record(F4,
						<<B3/binary, 34>>)
    end.

e_msg_navstar_dns_zone(Msg) ->
    e_msg_navstar_dns_zone(Msg, <<>>).


e_msg_navstar_dns_zone(#navstar_dns_zone{name = F1,
					 records = F2},
		       Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    if F2 == [] -> B1;
       true -> e_field_navstar_dns_zone_records(F2, B1)
    end.

e_mfield_navstar_dns_record_srv_record(Msg, Bin) ->
    SubBin = e_msg_navstar_dns_srvrecord(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_navstar_dns_record_a_record(Msg, Bin) ->
    SubBin = e_msg_navstar_dns_arecord(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_navstar_dns_zone_records(Msg, Bin) ->
    SubBin = e_msg_navstar_dns_record(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_navstar_dns_zone_records([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_navstar_dns_zone_records(Elem, Bin2),
    e_field_navstar_dns_zone_records(Rest, Bin3);
e_field_navstar_dns_zone_records([], Bin) -> Bin.

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    case MsgName of
      navstar_dns_arecord -> d_msg_navstar_dns_arecord(Bin);
      navstar_dns_srvrecord ->
	  d_msg_navstar_dns_srvrecord(Bin);
      navstar_dns_record -> d_msg_navstar_dns_record(Bin);
      navstar_dns_zone -> d_msg_navstar_dns_zone(Bin)
    end.



'd_enum_Record.Type'(0) -> 'A';
'd_enum_Record.Type'(1) -> 'SRV'.

d_msg_navstar_dns_arecord(Bin) ->
    dfp_read_field_def_navstar_dns_arecord(Bin, 0, 0,
					   undefined).

dfp_read_field_def_navstar_dns_arecord(<<8,
					 Rest/binary>>,
				       Z1, Z2, F1) ->
    d_field_navstar_dns_arecord_ip(Rest, Z1, Z2, F1);
dfp_read_field_def_navstar_dns_arecord(<<>>, 0, 0,
				       F1) ->
    #navstar_dns_arecord{ip = F1};
dfp_read_field_def_navstar_dns_arecord(Other, Z1, Z2,
				       F1) ->
    dg_read_field_def_navstar_dns_arecord(Other, Z1, Z2,
					  F1).

dg_read_field_def_navstar_dns_arecord(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_navstar_dns_arecord(Rest, N + 7,
					  X bsl N + Acc, F1);
dg_read_field_def_navstar_dns_arecord(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_navstar_dns_arecord_ip(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_navstar_dns_arecord(Rest, 0, 0, F1);
	    1 -> skip_64_navstar_dns_arecord(Rest, 0, 0, F1);
	    2 ->
		skip_length_delimited_navstar_dns_arecord(Rest, 0, 0,
							  F1);
	    5 -> skip_32_navstar_dns_arecord(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_navstar_dns_arecord(<<>>, 0, 0, F1) ->
    #navstar_dns_arecord{ip = F1}.

d_field_navstar_dns_arecord_ip(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1)
    when N < 57 ->
    d_field_navstar_dns_arecord_ip(Rest, N + 7,
				   X bsl N + Acc, F1);
d_field_navstar_dns_arecord_ip(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_navstar_dns_arecord(Rest, 0, 0,
					   NewFValue).


skip_varint_navstar_dns_arecord(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1) ->
    skip_varint_navstar_dns_arecord(Rest, Z1, Z2, F1);
skip_varint_navstar_dns_arecord(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1) ->
    dfp_read_field_def_navstar_dns_arecord(Rest, Z1, Z2,
					   F1).


skip_length_delimited_navstar_dns_arecord(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_navstar_dns_arecord(Rest, N + 7,
					      X bsl N + Acc, F1);
skip_length_delimited_navstar_dns_arecord(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_navstar_dns_arecord(Rest2, 0, 0, F1).


skip_32_navstar_dns_arecord(<<_:32, Rest/binary>>, Z1,
			    Z2, F1) ->
    dfp_read_field_def_navstar_dns_arecord(Rest, Z1, Z2,
					   F1).


skip_64_navstar_dns_arecord(<<_:64, Rest/binary>>, Z1,
			    Z2, F1) ->
    dfp_read_field_def_navstar_dns_arecord(Rest, Z1, Z2,
					   F1).


d_msg_navstar_dns_srvrecord(Bin) ->
    dfp_read_field_def_navstar_dns_srvrecord(Bin, 0, 0,
					     undefined, undefined, undefined,
					     undefined).

dfp_read_field_def_navstar_dns_srvrecord(<<8,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4) ->
    d_field_navstar_dns_srvrecord_priority(Rest, Z1, Z2, F1,
					   F2, F3, F4);
dfp_read_field_def_navstar_dns_srvrecord(<<16,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4) ->
    d_field_navstar_dns_srvrecord_weight(Rest, Z1, Z2, F1,
					 F2, F3, F4);
dfp_read_field_def_navstar_dns_srvrecord(<<26,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4) ->
    d_field_navstar_dns_srvrecord_target(Rest, Z1, Z2, F1,
					 F2, F3, F4);
dfp_read_field_def_navstar_dns_srvrecord(<<32,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4) ->
    d_field_navstar_dns_srvrecord_port(Rest, Z1, Z2, F1, F2,
				       F3, F4);
dfp_read_field_def_navstar_dns_srvrecord(<<>>, 0, 0, F1,
					 F2, F3, F4) ->
    #navstar_dns_srvrecord{priority = F1, weight = F2,
			   target = F3, port = F4};
dfp_read_field_def_navstar_dns_srvrecord(Other, Z1, Z2,
					 F1, F2, F3, F4) ->
    dg_read_field_def_navstar_dns_srvrecord(Other, Z1, Z2,
					    F1, F2, F3, F4).

dg_read_field_def_navstar_dns_srvrecord(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4)
    when N < 32 - 7 ->
    dg_read_field_def_navstar_dns_srvrecord(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4);
dg_read_field_def_navstar_dns_srvrecord(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_navstar_dns_srvrecord_priority(Rest, 0, 0, F1,
						 F2, F3, F4);
      16 ->
	  d_field_navstar_dns_srvrecord_weight(Rest, 0, 0, F1, F2,
					       F3, F4);
      26 ->
	  d_field_navstar_dns_srvrecord_target(Rest, 0, 0, F1, F2,
					       F3, F4);
      32 ->
	  d_field_navstar_dns_srvrecord_port(Rest, 0, 0, F1, F2,
					     F3, F4);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_navstar_dns_srvrecord(Rest, 0, 0, F1, F2,
						  F3, F4);
	    1 ->
		skip_64_navstar_dns_srvrecord(Rest, 0, 0, F1, F2, F3,
					      F4);
	    2 ->
		skip_length_delimited_navstar_dns_srvrecord(Rest, 0, 0,
							    F1, F2, F3, F4);
	    5 ->
		skip_32_navstar_dns_srvrecord(Rest, 0, 0, F1, F2, F3,
					      F4)
	  end
    end;
dg_read_field_def_navstar_dns_srvrecord(<<>>, 0, 0, F1,
					F2, F3, F4) ->
    #navstar_dns_srvrecord{priority = F1, weight = F2,
			   target = F3, port = F4}.

d_field_navstar_dns_srvrecord_priority(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_navstar_dns_srvrecord_priority(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4);
d_field_navstar_dns_srvrecord_priority(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, F2, F3, F4) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_navstar_dns_srvrecord(Rest, 0, 0,
					     NewFValue, F2, F3, F4).


d_field_navstar_dns_srvrecord_weight(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_navstar_dns_srvrecord_weight(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4);
d_field_navstar_dns_srvrecord_weight(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, _, F3, F4) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_navstar_dns_srvrecord(Rest, 0, 0, F1,
					     NewFValue, F3, F4).


d_field_navstar_dns_srvrecord_target(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_navstar_dns_srvrecord_target(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4);
d_field_navstar_dns_srvrecord_target(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, _, F4) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_navstar_dns_srvrecord(Rest2, 0, 0,
					     F1, F2, NewFValue, F4).


d_field_navstar_dns_srvrecord_port(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_navstar_dns_srvrecord_port(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4);
d_field_navstar_dns_srvrecord_port(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, _) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_navstar_dns_srvrecord(Rest, 0, 0, F1,
					     F2, F3, NewFValue).


skip_varint_navstar_dns_srvrecord(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4) ->
    skip_varint_navstar_dns_srvrecord(Rest, Z1, Z2, F1, F2,
				      F3, F4);
skip_varint_navstar_dns_srvrecord(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4) ->
    dfp_read_field_def_navstar_dns_srvrecord(Rest, Z1, Z2,
					     F1, F2, F3, F4).


skip_length_delimited_navstar_dns_srvrecord(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    skip_length_delimited_navstar_dns_srvrecord(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4);
skip_length_delimited_navstar_dns_srvrecord(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_navstar_dns_srvrecord(Rest2, 0, 0,
					     F1, F2, F3, F4).


skip_32_navstar_dns_srvrecord(<<_:32, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4) ->
    dfp_read_field_def_navstar_dns_srvrecord(Rest, Z1, Z2,
					     F1, F2, F3, F4).


skip_64_navstar_dns_srvrecord(<<_:64, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4) ->
    dfp_read_field_def_navstar_dns_srvrecord(Rest, Z1, Z2,
					     F1, F2, F3, F4).


d_msg_navstar_dns_record(Bin) ->
    dfp_read_field_def_navstar_dns_record(Bin, 0, 0,
					  undefined, undefined, undefined,
					  undefined).

dfp_read_field_def_navstar_dns_record(<<10,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4) ->
    d_field_navstar_dns_record_name(Rest, Z1, Z2, F1, F2,
				    F3, F4);
dfp_read_field_def_navstar_dns_record(<<16,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4) ->
    d_field_navstar_dns_record_type(Rest, Z1, Z2, F1, F2,
				    F3, F4);
dfp_read_field_def_navstar_dns_record(<<26,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4) ->
    d_field_navstar_dns_record_srv_record(Rest, Z1, Z2, F1,
					  F2, F3, F4);
dfp_read_field_def_navstar_dns_record(<<34,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4) ->
    d_field_navstar_dns_record_a_record(Rest, Z1, Z2, F1,
					F2, F3, F4);
dfp_read_field_def_navstar_dns_record(<<>>, 0, 0, F1,
				      F2, F3, F4) ->
    #navstar_dns_record{name = F1, type = F2,
			srv_record = F3, a_record = F4};
dfp_read_field_def_navstar_dns_record(Other, Z1, Z2, F1,
				      F2, F3, F4) ->
    dg_read_field_def_navstar_dns_record(Other, Z1, Z2, F1,
					 F2, F3, F4).

dg_read_field_def_navstar_dns_record(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4)
    when N < 32 - 7 ->
    dg_read_field_def_navstar_dns_record(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4);
dg_read_field_def_navstar_dns_record(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_navstar_dns_record_name(Rest, 0, 0, F1, F2, F3,
					  F4);
      16 ->
	  d_field_navstar_dns_record_type(Rest, 0, 0, F1, F2, F3,
					  F4);
      26 ->
	  d_field_navstar_dns_record_srv_record(Rest, 0, 0, F1,
						F2, F3, F4);
      34 ->
	  d_field_navstar_dns_record_a_record(Rest, 0, 0, F1, F2,
					      F3, F4);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_navstar_dns_record(Rest, 0, 0, F1, F2, F3,
					       F4);
	    1 ->
		skip_64_navstar_dns_record(Rest, 0, 0, F1, F2, F3, F4);
	    2 ->
		skip_length_delimited_navstar_dns_record(Rest, 0, 0, F1,
							 F2, F3, F4);
	    5 ->
		skip_32_navstar_dns_record(Rest, 0, 0, F1, F2, F3, F4)
	  end
    end;
dg_read_field_def_navstar_dns_record(<<>>, 0, 0, F1, F2,
				     F3, F4) ->
    #navstar_dns_record{name = F1, type = F2,
			srv_record = F3, a_record = F4}.

d_field_navstar_dns_record_name(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_navstar_dns_record_name(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4);
d_field_navstar_dns_record_name(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_navstar_dns_record(Rest2, 0, 0,
					  NewFValue, F2, F3, F4).


d_field_navstar_dns_record_type(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_navstar_dns_record_type(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4);
d_field_navstar_dns_record_type(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, _, F3, F4) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_Record.Type'(Tmp),
    dfp_read_field_def_navstar_dns_record(Rest, 0, 0, F1,
					  NewFValue, F3, F4).


d_field_navstar_dns_record_srv_record(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_navstar_dns_record_srv_record(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4);
d_field_navstar_dns_record_srv_record(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, navstar_dns_srvrecord),
    dfp_read_field_def_navstar_dns_record(Rest2, 0, 0, F1,
					  F2,
					  if F3 == undefined -> NewFValue;
					     true ->
						 merge_msg_navstar_dns_srvrecord(F3,
										 NewFValue)
					  end,
					  F4).


d_field_navstar_dns_record_a_record(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_navstar_dns_record_a_record(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4);
d_field_navstar_dns_record_a_record(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, navstar_dns_arecord),
    dfp_read_field_def_navstar_dns_record(Rest2, 0, 0, F1,
					  F2, F3,
					  if F4 == undefined -> NewFValue;
					     true ->
						 merge_msg_navstar_dns_arecord(F4,
									       NewFValue)
					  end).


skip_varint_navstar_dns_record(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4) ->
    skip_varint_navstar_dns_record(Rest, Z1, Z2, F1, F2, F3,
				   F4);
skip_varint_navstar_dns_record(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4) ->
    dfp_read_field_def_navstar_dns_record(Rest, Z1, Z2, F1,
					  F2, F3, F4).


skip_length_delimited_navstar_dns_record(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    skip_length_delimited_navstar_dns_record(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4);
skip_length_delimited_navstar_dns_record(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_navstar_dns_record(Rest2, 0, 0, F1,
					  F2, F3, F4).


skip_32_navstar_dns_record(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, F2, F3, F4) ->
    dfp_read_field_def_navstar_dns_record(Rest, Z1, Z2, F1,
					  F2, F3, F4).


skip_64_navstar_dns_record(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, F2, F3, F4) ->
    dfp_read_field_def_navstar_dns_record(Rest, Z1, Z2, F1,
					  F2, F3, F4).


d_msg_navstar_dns_zone(Bin) ->
    dfp_read_field_def_navstar_dns_zone(Bin, 0, 0,
					undefined, []).

dfp_read_field_def_navstar_dns_zone(<<10, Rest/binary>>,
				    Z1, Z2, F1, F2) ->
    d_field_navstar_dns_zone_name(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_navstar_dns_zone(<<18, Rest/binary>>,
				    Z1, Z2, F1, F2) ->
    d_field_navstar_dns_zone_records(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_navstar_dns_zone(<<>>, 0, 0, F1,
				    F2) ->
    #navstar_dns_zone{name = F1,
		      records = lists:reverse(F2)};
dfp_read_field_def_navstar_dns_zone(Other, Z1, Z2, F1,
				    F2) ->
    dg_read_field_def_navstar_dns_zone(Other, Z1, Z2, F1,
				       F2).

dg_read_field_def_navstar_dns_zone(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_navstar_dns_zone(Rest, N + 7,
				       X bsl N + Acc, F1, F2);
dg_read_field_def_navstar_dns_zone(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_navstar_dns_zone_name(Rest, 0, 0, F1, F2);
      18 ->
	  d_field_navstar_dns_zone_records(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_navstar_dns_zone(Rest, 0, 0, F1, F2);
	    1 -> skip_64_navstar_dns_zone(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_navstar_dns_zone(Rest, 0, 0, F1,
						       F2);
	    5 -> skip_32_navstar_dns_zone(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_navstar_dns_zone(<<>>, 0, 0, F1,
				   F2) ->
    #navstar_dns_zone{name = F1,
		      records = lists:reverse(F2)}.

d_field_navstar_dns_zone_name(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2)
    when N < 57 ->
    d_field_navstar_dns_zone_name(Rest, N + 7,
				  X bsl N + Acc, F1, F2);
d_field_navstar_dns_zone_name(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_navstar_dns_zone(Rest2, 0, 0,
					NewFValue, F2).


d_field_navstar_dns_zone_records(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2)
    when N < 57 ->
    d_field_navstar_dns_zone_records(Rest, N + 7,
				     X bsl N + Acc, F1, F2);
d_field_navstar_dns_zone_records(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, navstar_dns_record),
    dfp_read_field_def_navstar_dns_zone(Rest2, 0, 0, F1,
					[NewFValue | F2]).


skip_varint_navstar_dns_zone(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2) ->
    skip_varint_navstar_dns_zone(Rest, Z1, Z2, F1, F2);
skip_varint_navstar_dns_zone(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2) ->
    dfp_read_field_def_navstar_dns_zone(Rest, Z1, Z2, F1,
					F2).


skip_length_delimited_navstar_dns_zone(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_navstar_dns_zone(Rest, N + 7,
					   X bsl N + Acc, F1, F2);
skip_length_delimited_navstar_dns_zone(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_navstar_dns_zone(Rest2, 0, 0, F1,
					F2).


skip_32_navstar_dns_zone(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2) ->
    dfp_read_field_def_navstar_dns_zone(Rest, Z1, Z2, F1,
					F2).


skip_64_navstar_dns_zone(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2) ->
    dfp_read_field_def_navstar_dns_zone(Rest, Z1, Z2, F1,
					F2).




merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    case Prev of
      #navstar_dns_arecord{} ->
	  merge_msg_navstar_dns_arecord(Prev, New);
      #navstar_dns_srvrecord{} ->
	  merge_msg_navstar_dns_srvrecord(Prev, New);
      #navstar_dns_record{} ->
	  merge_msg_navstar_dns_record(Prev, New);
      #navstar_dns_zone{} ->
	  merge_msg_navstar_dns_zone(Prev, New)
    end.

merge_msg_navstar_dns_arecord(Prev, undefined) -> Prev;
merge_msg_navstar_dns_arecord(undefined, New) -> New;
merge_msg_navstar_dns_arecord(#navstar_dns_arecord{ip =
						       PFip},
			      #navstar_dns_arecord{ip = NFip}) ->
    #navstar_dns_arecord{ip =
			     if NFip =:= undefined -> PFip;
				true -> NFip
			     end}.

merge_msg_navstar_dns_srvrecord(Prev, undefined) ->
    Prev;
merge_msg_navstar_dns_srvrecord(undefined, New) -> New;
merge_msg_navstar_dns_srvrecord(#navstar_dns_srvrecord{priority
							   = PFpriority,
						       weight = PFweight,
						       target = PFtarget,
						       port = PFport},
				#navstar_dns_srvrecord{priority = NFpriority,
						       weight = NFweight,
						       target = NFtarget,
						       port = NFport}) ->
    #navstar_dns_srvrecord{priority =
			       if NFpriority =:= undefined -> PFpriority;
				  true -> NFpriority
			       end,
			   weight =
			       if NFweight =:= undefined -> PFweight;
				  true -> NFweight
			       end,
			   target =
			       if NFtarget =:= undefined -> PFtarget;
				  true -> NFtarget
			       end,
			   port =
			       if NFport =:= undefined -> PFport;
				  true -> NFport
			       end}.

merge_msg_navstar_dns_record(#navstar_dns_record{name =
						     PFname,
						 type = PFtype,
						 srv_record = PFsrv_record,
						 a_record = PFa_record},
			     #navstar_dns_record{name = NFname, type = NFtype,
						 srv_record = NFsrv_record,
						 a_record = NFa_record}) ->
    #navstar_dns_record{name =
			    if NFname =:= undefined -> PFname;
			       true -> NFname
			    end,
			type =
			    if NFtype =:= undefined -> PFtype;
			       true -> NFtype
			    end,
			srv_record =
			    merge_msg_navstar_dns_srvrecord(PFsrv_record,
							    NFsrv_record),
			a_record =
			    merge_msg_navstar_dns_arecord(PFa_record,
							  NFa_record)}.

merge_msg_navstar_dns_zone(#navstar_dns_zone{name =
						 PFname,
					     records = PFrecords},
			   #navstar_dns_zone{name = NFname,
					     records = NFrecords}) ->
    #navstar_dns_zone{name =
			  if NFname =:= undefined -> PFname;
			     true -> NFname
			  end,
		      records = PFrecords ++ NFrecords}.



verify_msg(Msg) ->
    case Msg of
      #navstar_dns_arecord{} ->
	  v_msg_navstar_dns_arecord(Msg, [navstar_dns_arecord]);
      #navstar_dns_srvrecord{} ->
	  v_msg_navstar_dns_srvrecord(Msg,
				      [navstar_dns_srvrecord]);
      #navstar_dns_record{} ->
	  v_msg_navstar_dns_record(Msg, [navstar_dns_record]);
      #navstar_dns_zone{} ->
	  v_msg_navstar_dns_zone(Msg, [navstar_dns_zone]);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


v_msg_navstar_dns_arecord(#navstar_dns_arecord{ip = F1},
			  Path) ->
    v_type_uint32(F1, [ip | Path]), ok;
v_msg_navstar_dns_arecord(X, Path) ->
    mk_type_error({expected_msg, navstar_dns_arecord}, X,
		  Path).

v_msg_navstar_dns_srvrecord(#navstar_dns_srvrecord{priority
						       = F1,
						   weight = F2, target = F3,
						   port = F4},
			    Path) ->
    v_type_int32(F1, [priority | Path]),
    v_type_int32(F2, [weight | Path]),
    v_type_string(F3, [target | Path]),
    v_type_int32(F4, [port | Path]),
    ok;
v_msg_navstar_dns_srvrecord(X, Path) ->
    mk_type_error({expected_msg, navstar_dns_srvrecord}, X,
		  Path).

v_msg_navstar_dns_record(#navstar_dns_record{name = F1,
					     type = F2, srv_record = F3,
					     a_record = F4},
			 Path) ->
    v_type_string(F1, [name | Path]),
    'v_enum_Record.Type'(F2, [type | Path]),
    if F3 == undefined -> ok;
       true ->
	   v_msg_navstar_dns_srvrecord(F3, [srv_record | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_msg_navstar_dns_arecord(F4, [a_record | Path])
    end,
    ok;
v_msg_navstar_dns_record(X, Path) ->
    mk_type_error({expected_msg, navstar_dns_record}, X,
		  Path).

v_msg_navstar_dns_zone(#navstar_dns_zone{name = F1,
					 records = F2},
		       Path) ->
    v_type_string(F1, [name | Path]),
    if is_list(F2) ->
	   [v_msg_navstar_dns_record(Elem, [records | Path])
	    || Elem <- F2];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, navstar_dns_record}},
			 F2, Path)
    end,
    ok.

'v_enum_Record.Type'('A', _Path) -> ok;
'v_enum_Record.Type'('SRV', _Path) -> ok;
'v_enum_Record.Type'(X, Path) ->
    mk_type_error({invalid_enum, 'Record.Type'}, X, Path).

v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

v_type_uint32(N, _Path) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



get_msg_defs() ->
    [{{enum, 'Record.Type'}, [{'A', 0}, {'SRV', 1}]},
     {{msg, navstar_dns_arecord},
      [#field{name = ip, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, navstar_dns_srvrecord},
      [#field{name = priority, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []},
       #field{name = weight, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = target, fnum = 3, rnum = 4, type = string,
	      occurrence = required, opts = []},
       #field{name = port, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, navstar_dns_record},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = type, fnum = 2, rnum = 3,
	      type = {enum, 'Record.Type'}, occurrence = required,
	      opts = []},
       #field{name = srv_record, fnum = 3, rnum = 4,
	      type = {msg, navstar_dns_srvrecord},
	      occurrence = optional, opts = []},
       #field{name = a_record, fnum = 4, rnum = 5,
	      type = {msg, navstar_dns_arecord},
	      occurrence = optional, opts = []}]},
     {{msg, navstar_dns_zone},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = records, fnum = 2, rnum = 3,
	      type = {msg, navstar_dns_record}, occurrence = repeated,
	      opts = []}]}].


get_msg_names() ->
    [navstar_dns_arecord, navstar_dns_srvrecord,
     navstar_dns_record, navstar_dns_zone].


get_enum_names() -> ['Record.Type'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(navstar_dns_arecord) ->
    [#field{name = ip, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def(navstar_dns_srvrecord) ->
    [#field{name = priority, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []},
     #field{name = weight, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = target, fnum = 3, rnum = 4, type = string,
	    occurrence = required, opts = []},
     #field{name = port, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(navstar_dns_record) ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = type, fnum = 2, rnum = 3,
	    type = {enum, 'Record.Type'}, occurrence = required,
	    opts = []},
     #field{name = srv_record, fnum = 3, rnum = 4,
	    type = {msg, navstar_dns_srvrecord},
	    occurrence = optional, opts = []},
     #field{name = a_record, fnum = 4, rnum = 5,
	    type = {msg, navstar_dns_arecord},
	    occurrence = optional, opts = []}];
find_msg_def(navstar_dns_zone) ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = records, fnum = 2, rnum = 3,
	    type = {msg, navstar_dns_record}, occurrence = repeated,
	    opts = []}];
find_msg_def(_) -> error.


find_enum_def('Record.Type') -> [{'A', 0}, {'SRV', 1}];
find_enum_def(_) -> error.


enum_symbol_by_value('Record.Type', Value) ->
    'enum_symbol_by_value_Record.Type'(Value).


enum_value_by_symbol('Record.Type', Sym) ->
    'enum_value_by_symbol_Record.Type'(Sym).


'enum_symbol_by_value_Record.Type'(0) -> 'A';
'enum_symbol_by_value_Record.Type'(1) -> 'SRV'.


'enum_value_by_symbol_Record.Type'('A') -> 0;
'enum_value_by_symbol_Record.Type'('SRV') -> 1.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "3.20.3".

gpb_version_as_list() ->
    [3,20,3].
